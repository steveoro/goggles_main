.wrapper-body
  .spacer-left

  .main-content
    .row-fluid#chrono-index-title
      %h4.text-center.pb-3
        %i.fa.fa-clock-o
        = t('chrono.index.title')
    .container
      %p
        %small
          %i= t('chrono.index.queue_notice')

    .container.mt-2
      - if @queues.count.positive?
        - GogglesDb::ImportQueueDecorator.decorate_collection(@queues).each do |queue|
          .row.border
            .col.mt-2.text-left
              %small= queue.text_label
              - if queue.sibling_rows.count.positive?
                = render(Switch::RotatingComponent.new(target_id: "laps#{queue.id}"))
            .col-2.my-1.text-center
              = button_to(chrono_delete_path(queue.id), { id: "frm-delete-row-#{queue.id}", method: :delete,
                          class: 'btn btn-sm btn-outline-danger',
                          data: { confirm: t('chrono.index.confirm_delete', queue_label: queue.text_label) } }) do
                %i.fa.fa-trash-o

          - if queue.sibling_rows.count.positive?
            %ul.collapse{ id: "laps#{queue.id}" }
              - collection = queue.sibling_rows.includes(:import_queues)
              - decorated = GogglesDb::ImportQueueDecorator.decorate_collection(collection)
              - decorated.sort { |a, b| a.req_length_in_meters <=> b.req_length_in_meters }.each do |linked_queue|
                %li.text-left
                  %small= linked_queue.text_label
      - else
        .row.list-group-item.text-center
          %small= t('chrono.index.no_data_notice')

    .container
      %p
        %small
          %i= t('chrono.index.registration_notice')

      .container.mt-4
        .row-fluid.text-center
          = link_to(t('chrono.buttons.new_recording'), chrono_new_path, id: 'btn-new-chrono',
                    class: 'btn btn-primary', 'aria-label' => 'New recording', type: 'button')

    %section.fixed-bottom#footer
      = render(Footer::MainComponent.new)

  .spacer-right
