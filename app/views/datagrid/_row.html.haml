- visible_columns = grid.html_columns(*options[:columns])
- has_calendar = visible_columns.map(&:name).include?(:calendar_date)
%tr{ class: grid.respond_to?(:row_class) ? grid.row_class(asset).to_s : '' }
  - visible_columns.each do |column|
    - if column.name == :star
      - row_id = asset.respond_to?(:meeting_id) ? asset.meeting_id : asset.id
      %td.text-center
        %span.user-star{ id: "user-star-#{row_id}", data: { row_id: row_id } }
          = render(Grid::RowStarButtonComponent.new(asset_row: asset, current_user: current_user))
        - if grid.class.respond_to?(:managed_teams) && grid.class.managed_teams.present?
          &nbsp;
          %span.team-star{ id: "team-star-#{row_id}", data: { row_id: row_id } }
            = render(Grid::TeamStarButtonComponent.new(asset_row: asset, current_user: current_user,
                     user_teams: grid.class.managed_teams))
    - else
      - css_classes = datagrid_column_classes(grid, column).to_s
      - if column.options[:align].present? && column.options[:align] == :center
        - css_classes << ' text-center'
      - if column.options[:align].present? && column.options[:align] == :right
        - css_classes << ' text-right'
      %td{ class: css_classes }= datagrid_value(grid, column, asset)

-# Add a custom row when dealing with Calendars' confirmed meetings and events
- if has_calendar && asset.respond_to?(:meeting) && asset.meeting && !asset.meeting.cancelled
  / For each session, render a custom row with the session date in a specific column and its event list in another:
  - md = MeetingDecorator.decorate(asset.meeting)
  - event_hash = md.hash_of_session_dates_and_event_type_codes
  - event_hash.each do |session_date, event_list|
    %tr
      - visible_columns.each do |column|
        - if column.name == :calendar_date
          %td.event-list.text-center
            = session_date
        - elsif column.name == :calendar_name
          %td.event-list
            = event_list.join(', ')
        - else
          %td
